:foo
:foo = :foo
Symbol.all_symbols.map { |x| x.to_s }
Symbol.all_symbols.map { |x| x.to_s }.size
:fa
a.fa
:ruby
v=_
v.is_a?(string)
v.is_a?(String)
v.eql)
v.eql
v.eql?("ruby")
a="|slkf"
a.split("|")
a="dfsf"
a.gsub("/\s/", "_")
a="adfa"
a.gsub(/\s/, '_')
"abbccc az"[/az*/]
"abbccc az"[/az+/]
/hay/ =~ 'haystack'
/hay/ =~ 'adfafdhaystack'
h=["a","b"]
h*"n"
h*","
p=_
p[/\A/]
p[/\A./]
p[/.\Z/]
p="43kajsdhfka\n2"
p[/^\d+/]]
p[/^\d+/]
p[/\d+/]
"num 42\n2 lines"[/^\d/]
"num 42\n2 lines"[/^\d+/]
"43kajsdhfka\n2"[/^\d+/]]
"43kajsdhfka\n2"[/^\d+/]
"gay, james"[/(\w+), (\w+)/]
"gay, james"[/(\w+), (\w+)/, 2]
"gay, james"[/(\w+), (\w+)/, 1]
"gay, james"[/(\w+), (\w+)/, 3]
"gay, james"[/(\w+), (\w+)/, 0]
$1
$2
p
p.sub([/(k\w*)/])
p.sub([/(k\w*)/]){$1 [0,1]}
p.sub(/(k\w*)/){$1 [0,1]}
p.sub(/(k\w*)/)
p.sub(/(k\w*)/){$2}
p.sub(/(k\w*)/){$2 [0,1]}
p.sub(/(k\w*)/){$1}}
p.sub(/(k\w*)/){$1}
p.sub(/(k\w*)/){$1 [0,3]}
"one two-three".gsub(/(t\w*)/)
"one two-three".gsub(/(t\w*)/){$1 [0,1]}
"one two-three".gsub(/(t\w*)/){$1 [0,3]}
"one two-three".gsub(/(t\w*)/){$1 [0,2]}
"one two-three".sub(/(t\w*)/){$1 [0,2]}
"one two-three".sub(/(t\w*)/)("*")
"one two-three".sub(/(t\w*)/,"*")
"one two-three".gsub(/(t\w*)/,"*")
"one two-three".gsub(/(t)/,"*")
"one two-three".gsub(/(t)/{$1 [0,1]},"*")
"one two-three".gsub(/(t)/){$1 [0,2]}
"one two-three".gsub(/(o)/){$1 [0,2]}
"one two-three".gsub(/(o)/){$1 [0,1]}
"one two-three".gsub(/(o\w+)/){$1 [1,2]}
"one two-three".gsub(/(o\w+)/){$1 [0,1]}
Crowdring::Campaign.first
Campaign
Crowdring::Campaign.last.introductory_response
Crowdring::Campaign.last.introductory_response.id
Crowdring::Campaign.last.introductory_response.tag
Crowdring::Campaign.last.introductory_response.tags
Crowdring::Campaign.last
Crowdring::Campaign.last.delete
Crowdring::Campaign.delete
Crowdring::Campaign.last.destroy
require 'countries'
c = Country
c = Country.new('US')
c.number
c.alpha2
c.name
c.names
c.subdivisions
require 'crowdring'
require 'phone'
Phone
require 'Phone'
Phone::Phone.parse('+18000000000')
Phoner::Phone.parse('+18000000000')
Phoner::Phone.parse('+18000000000').name
Phoner::Phone.parse('+18000000000').country_code
a=_
a
p 
exit
